#include <Energia.h>
#include <memory.h>
#include <keyboard.h>
#include "port.h"
#include "petio.h"

// maps scan codes to pet rows/cols
// map L-GUI to LSHIFT and R-GUI to RSHIFT
static const byte scanmap[128] = {
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, // 0x00
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, // 0x08
	0xff, 0xff, 0xff, 0xff, 0xff, 0x20, 0x66, 0xff, // 0x10
	0xff, 0xff, 0x60, 0x50, 0x40, 0x30, 0x76, 0x80, // 0x18
	0xff, 0x61, 0x70, 0x41, 0x21, 0x46, 0x67, 0x85, // 0x20
	0xff, 0x92, 0x71, 0x51, 0x22, 0x31, 0x56, 0xff, // 0x28
	0xff, 0x72, 0x62, 0x52, 0x42, 0x32, 0x47, 0xff, // 0x30
	0xff, 0xff, 0x63, 0x43, 0x23, 0x26, 0x36, 0xff, // 0x38
	0xff, 0x73, 0x53, 0x33, 0x24, 0x86, 0x27, 0xff, // 0x40
	0xff, 0x96, 0x37, 0x44, 0x64, 0x34, 0x87, 0xff, // 0x48
	0xff, 0xff, 0x12, 0xff, 0x91, 0x97, 0xff, 0xff, // 0x50
	0xff, 0x85, 0x65, 0x82, 0xff, 0x01, 0xff, 0xff, // 0x58
	0x13, 0xff, 0xff, 0xff, 0xff, 0x05, 0x17, 0xff, // 0x60
	0xff, 0xff, 0xff, 0xff, 0x06, 0xff, 0xff, 0xff, // 0x68
	0xff, 0x17, 0x16, 0xff, 0x07, 0xff, 0xff, 0xff, // 0x70
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, // 0x78
};

static const byte shiftmap[128] = {
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, // 0x00
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, // 0x08
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0xff, // 0x10
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x10, 0xff, // 0x18
	0xff, 0xff, 0xff, 0xff, 0xff, 0x11, 0xff, 0xff, // 0x20
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x02, 0xff, // 0x28
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x25, 0xff, // 0x30
	0xff, 0xff, 0xff, 0xff, 0xff, 0x03, 0x57, 0xff, // 0x38
	0xff, 0x93, 0xff, 0xff, 0xff, 0x14, 0x04, 0xff, // 0x40
	0xff, 0x84, 0x74, 0xff, 0x54, 0xff, 0x05, 0xff, // 0x48
	0xff, 0xff, 0x81, 0xff, 0xff, 0x77, 0xff, 0xff, // 0x50
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, // 0x58
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, // 0x60
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, // 0x68
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, // 0x70
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, // 0x78
};

static const byte ctrlmap[128] = {
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, // 0x00
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, // 0x08
	0xff, 0xff, 0xff, 0xff, 0xff, 0x16, 0xff, 0xff, // 0x10
	0xff, 0xff, 0xff, 0x06, 0xff, 0xff, 0xff, 0xff, // 0x18
	0xff, 0x94, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, // 0x20
	0xff, 0xff, 0xff, 0xff, 0x17, 0x90, 0xff, 0xff, // 0x28
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, // 0x30
	0xff, 0xff, 0x65, 0xff, 0xff, 0xff, 0xff, 0xff, // 0x38
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, // 0x40
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, // 0x48
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, // 0x50
	0xff, 0xff, 0xff, 0x07, 0xff, 0xff, 0xff, 0xff, // 0x58
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, // 0x60
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, // 0x68
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, // 0x70
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, // 0x78
};

static bool isshift(byte scan) {
	return scan == 0x12 || scan == 0x59;
}

static bool isctrl(byte scan) {
	return scan == 0x14;
}

byte petio::_map(byte scan) {
	if (_shift)
		return shiftmap[scan];

	if (_ctrl)
		return ctrlmap[scan];

	return scanmap[scan];
}
	
void petio::_reset(byte k) {
	_rows[(k & 0xf0) >> 4] &= ~(1 << (k & 0x0f));
}

void petio::up(byte scan) {
	if (isshift(scan))
		_shift = false;
	else if (isctrl(scan))
		_ctrl = false;
	else {
		byte k = _map(scan);
		if (k != 0xff)
			_reset(k);
	}
}

void petio::_set(byte k) {
	_rows[(k & 0xf0) >> 4] |= 1 << (k & 0x0f);
}

void petio::down(byte scan) {
	if (isshift(scan))
		_shift = true;
	else if (isctrl(scan))
		_ctrl = true;
	else {
		byte k = _map(scan);
		if (k != 0xff)
			_set(k);
	}
}

void petio::reset() {
	for (int i = 10; i--; )
		_rows[i] = 0;
	_ctrl = false;
}

// see http://www.zimmers.net/anonftp/pub/cbm/firmware/computers/pet/PET-Interfaces.txt

// base is 0xe800
#define PIA1	0x0010
#define PIA2	0x0020
#define PORTA	0x00
#define CRA	0x01
#define PORTB	0x02
#define CRB	0x03

#define VIA	0x0040
#define ACR	0x0b
#define PCR	0x0c
#define IFR	0x0d
#define IER	0x0e

byte petio::pattern() {
	byte r = 0x00;

	switch (_acc) {
	// keyboard in
	case PIA1 + PORTB:
		r = _rows[_row] ^ 0xff;
		break;

	case PIA1 + PORTA:
		// diagnostic sense high (otherwise get monitor)
		r = 0x80 + _row;
		break;

	case PIA1 + CRA:
		// video sync in
		r = 0x87;
		break;

	case VIA + PORTA:
		// ~DAV + ~NRFD + ~NDAC
		r = 0x00;
		break;

	case VIA + IFR:
		// timer #1
		r = 0x40;
		break;

	default:
		// some other device...
		Serial.print(millis());
		Serial.print(' ');
		Serial.println(_acc, 16);
	}
	return r;
}

void petio::operator= (byte r) {
	switch (_acc) {
	case PIA1 + PORTA:
		_row = r & 0x0f;
		break;

	case VIA + PCR:
		CA2.write(r & 0x02);	 
		break;

	default:
		Serial.print(millis());
		Serial.print(' ');
		Serial.print(_acc, 16);
		Serial.print(' ');
		Serial.println(r, 16);
		break;
	}
}
