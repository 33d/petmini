#include <Energia.h>

#include <memory.h>
#include <cpu.h>
#include "petio.h"

static unsigned a(unsigned acc)
{
  return 0xe800 + acc; 
}

void petio::operator= (byte r) {
  unsigned addr = a(_acc);
  
  if (addr == 59408) {
    _row = r & 0x0f;
    return;
  }

  Serial.print(millis());
  Serial.print(' ');
  Serial.print(addr);
  Serial.print(' ');
  Serial.println(r, 16);
}

// maps scan codes to pet rows/cols
// map L-GUI to LSHIFT and R-GUI to RSHIFT
static const byte scanmap[128] = {
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, // 0x00
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, // 0x08
  0xff, 0xff, 0xff, 0xff, 0xff, 0x20, 0x66, 0xff, // 0x10
  0xff, 0xff, 0x60, 0x50, 0x40, 0x30, 0x76, 0x80, // 0x18
  0xff, 0x61, 0x70, 0x41, 0x21, 0x46, 0x67, 0x85, // 0x20
  0xff, 0x92, 0x71, 0x51, 0x22, 0x31, 0x56, 0xff, // 0x28
  0xff, 0x72, 0x62, 0x52, 0x42, 0x32, 0x47, 0xff, // 0x30
  0xff, 0xff, 0x63, 0x43, 0x23, 0x26, 0x36, 0xff, // 0x38
  0xff, 0x73, 0x53, 0x33, 0x24, 0x86, 0x47, 0xff, // 0x40
  0xff, 0x96, 0x37, 0x44, 0x64, 0x34, 0x87, 0xff, // 0x48
  0xff, 0xff, 0x12, 0xff, 0x91, 0x97, 0xff, 0xff, // 0x50
  0xff, 0x85, 0x65, 0x82, 0xff, 0x01, 0xff, 0xff, // 0x58
  0x13, 0xff, 0xff, 0xff, 0xff, 0x05, 0x17, 0xff, // 0x60
  0xff, 0xff, 0xff, 0xff, 0x06, 0xff, 0xff, 0xff, // 0x68
  0xff, 0x17, 0x16, 0xff, 0x07, 0xff, 0xff, 0xff, // 0x70
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, // 0x78
};

static const byte shiftmap[128] = {
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, // 0x00
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, // 0x08
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0xff, // 0x10
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x10, 0xff, // 0x18
  0xff, 0xff, 0xff, 0xff, 0xff, 0x11, 0xff, 0xff, // 0x20
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x02, 0xff, // 0x28
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x25, 0xff, // 0x30
  0xff, 0xff, 0xff, 0xff, 0xff, 0x03, 0x57, 0xff, // 0x38
  0xff, 0x93, 0xff, 0xff, 0xff, 0x14, 0x04, 0xff, // 0x40
  0xff, 0x84, 0x74, 0xff, 0x54, 0xff, 0x05, 0xff, // 0x48
  0xff, 0xff, 0x81, 0xff, 0xff, 0x77, 0xff, 0xff, // 0x50
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, // 0x58
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, // 0x60
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, // 0x68
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, // 0x70
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, // 0x78
};

static const byte ctrlmap[128] = {
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, // 0x00
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, // 0x08
  0xff, 0xff, 0xff, 0xff, 0xff, 0x16, 0xff, 0xff, // 0x10
  0xff, 0xff, 0xff, 0x06, 0xff, 0xff, 0xff, 0xff, // 0x18
  0xff, 0x94, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, // 0x20
  0xff, 0xff, 0xff, 0xff, 0x17, 0x90, 0xff, 0xff, // 0x28
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, // 0x30
  0xff, 0xff, 0x65, 0xff, 0xff, 0xff, 0xff, 0xff, // 0x38
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, // 0x40
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, // 0x48
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, // 0x50
  0xff, 0xff, 0xff, 0x07, 0xff, 0xff, 0xff, 0xff, // 0x58
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, // 0x60
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, // 0x68
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, // 0x70
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, // 0x78
};

static bool isshift(byte scan) {
  return scan == 0x12 || scan == 0x59;
}

static bool isctrl(byte scan) {
  return scan == 0x14;
}

byte petio::_map(byte scan) {
  if (_shift)
    return shiftmap[scan];

  if (_ctrl)
    return ctrlmap[scan];

  return scanmap[scan];
}
  
void petio::_reset(byte k) {
  _rows[(k & 0xf0) >> 4] &= ~(1 << (k & 0x0f));
}

void petio::up(byte scan) {
  if (isshift(scan))
    _shift = false;
  else if (isctrl(scan))
    _ctrl = false;
  else {
    byte k = _map(scan);
    if (k != 0xff)
      _reset(k);
  }
}

void petio::_set(byte k) {
  _rows[(k & 0xf0) >> 4] |= 1 << (k & 0x0f);
}

void petio::down(byte scan) {
  if (isshift(scan))
    _shift = true;
  else if (isctrl(scan))
    _ctrl = true;
  else {
    byte k = _map(scan);
    if (k != 0xff)
      _set(k);
  }
}

void petio::reset() {
  for (int i = 10; i--; )
    _rows[i] = 0;
  _ctrl = false;
}

// see http://www.zimmers.net/anonftp/pub/cbm/firmware/computers/pet/PET-Interfaces.txt
byte petio::pattern() {

  unsigned addr = a(_acc);
  
  // keyboard in
  if (addr == 59410) {
    byte r = _rows[_row] ^ 0xff;
    return r;
  }
  
  // cass #1, #2 sense low, diagnostic sense high (otherwise get monitor)
  if (addr == 59408)
    return 0x80 + _row;
    
  if (addr == 59411)
    return 0x87;  // video sync in
    
  // ~DAV + ~NRFD + ~NDAC
  if (addr == 59456)
    return 0x00;

  if (addr == 59469)
    return 0x40; // timer #1

  Serial.print(millis());
  Serial.print(' ');
  Serial.println(addr);

  // some other device...
  return 0x00;
}
